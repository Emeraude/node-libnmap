/* node-libnmap - https://github.com/jas-/node-libnmap */
var cluster=require("cluster"),libnmap=function(n){"use strict";var f={path:"/usr/bin/nmap",scripts:"/usr/bin/nmap/scripts/",flags:"-sn",range:"",ports:""},r=r||{scan:function(n){n=i.init(n)},discover:function(n){n=i.init(n);var r=u.range(),f=require("child_process").exec,t=!1;i.cluster(n,function(){r.forEach(function(i){n.range=i,t=u.command(n),f(t,function(n,t){if(n)throw n;console.log("STDOUT "+t)})})})}},i=i||{init:function(n){return u.merge(n,f)},cluster:function(n,t){if(cluster.isMaster){require("os").cpus().forEach(function(){cluster.fork()});cluster.on("exit, disconnect",function(){cluster.fork()})}else t()},end:function(){for(var t in cluster.workers)cluster.workers[t].destroy()}},u=u||{command:function(n){return n.ports?n.path+" "+n.flags+"  -p"+n.ports+" "+n.range:n.path+" "+n.flags+" "+n.range},merge:function(n,t){n=n||{};for(var i in t)t.hasOwnProperty(i)&&(n[i]=t[i]),n[i]=t[i];return n},adapters:function(){var t=require("os").networkInterfaces(),u=[],n,i,r;for(n in t)if(/array|object/.test(t[n]))for(i in t[n])/false/.test(t[n][i].internal)&&/ipv4/i.test(t[n][i].family)&&(r={"interface":n,properties:t[n][i]},u.push(r));return u},range:function(){var t=require("netmask").Netmask,n=[];return this.adapters().forEach(function(i){var r=new t(i.properties.address+"/"+i.properties.netmask);n.push(r.base+"/"+r.bitmask)}),n}};if(r[n])return r[n].apply(this,Array.prototype.slice.call(arguments,1));if(typeof n!="object"&&n)throw'Method "'+n+'" does not exist, please see node-libnmap API';else return r.init.apply(this,argumentss)};exports.libnmap=libnmap;
